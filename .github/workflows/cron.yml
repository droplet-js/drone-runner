name: cron

# [Events that trigger workflows](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#workflow_run)
#
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │
# │ │ │ │ │
# │ │ │ │ │
# * * * * *
# 
# 运算符	说明	示例
# *	任何值	15 * * * * 在每天每小时的每个第 15 分钟运行。
# ,	值列表分隔符	2,10 4,5 * * * 在每天第 4 和第 5 小时的第 2 和第 10 分钟运行。
# -	值的范围	30 4-6 * * * 在第 4、5 和 6 小时的第 30 分钟运行。
# /	步骤值	20/15 * * * * 在第 20 分钟到第 59 分钟每隔 15 分钟运行一次（第 20、35 和 50 分钟）。
#
# UTC 时间
# 
# 北京时间 UTC +8
# 

on:
  schedule:
    - cron: '* 4 * * *'

jobs:
  runner:
    name: Docker Runner on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Run drone/drone-runner-docker@shell
        run: |
          docker run \
            --volume=/var/run/docker.sock:/var/run/docker.sock \
            --env=DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }} \
            --env=DRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }} \
            --env=DRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }} \
            --restart=always \
            --name=runner \
            drone/drone-runner-docker:1.8.2

  # # 意义不大
  # runner-in-docker:
  #   name: Docker Runner In Docker on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest]
  #   container:
  #     image: docker:latest
  #   steps:
  #     - name: Run drone/drone-runner-docker@shell
  #       run: |
  #         docker run \
  #           --volume=/var/run/docker.sock:/var/run/docker.sock \
  #           --env=DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }} \
  #           --env=DRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }} \
  #           --env=DRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }} \
  #           --restart=always \
  #           --name=runner \
  #           drone/drone-runner-docker:1.8.2

  runner-ssh:
    name: SSH Runner on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Run drone/drone-runner-ssh@shell
        run: |
          docker run \
            --env=DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }} \
            --env=DRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }} \
            --env=DRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }} \
            --restart=always \
            --name=runner \
            drone/drone-runner-ssh:latest

  # # 意义不大
  # runner-ssh-in-docker:
  #   name: SSH Runner In Docker on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest]
  #   container:
  #     image: docker:latest
  #   steps:
  #     - name: Run drone/drone-runner-ssh@shell
  #       run: |
  #         docker run \
  #           --env=DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }} \
  #           --env=DRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }} \
  #           --env=DRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }} \
  #           --restart=always \
  #           --name=runner \
  #           drone/drone-runner-ssh:latest

  runner-exec:
    name: Exec Runner on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Run drone/drone-runner-exec-windows-amd64@shell
        if: matrix.os == 'windows-latest'
        run: |
          curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_windows_amd64.tar.gz -o drone_runner_exec_windows_amd64.tar.gz
          tar -zxvf .\drone_runner_exec_windows_amd64.tar.gz
          mkdir C:\Drone
          mkdir C:\Drone\drone-runner-exec
          cp drone-runner-exec.exe C:\Drone\drone-runner-exec
          printf "DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }}\nDRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }}\nDRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }}\n" | tee C:\Drone\drone-runner-exec\config
          C:\Drone\drone-runner-exec\drone-runner-exec.exe daemon C:\Drone\drone-runner-exec\config
      - name: Run drone/drone-runner-exec-linux-amd64@shell
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_amd64.tar.gz | tar zx
          sudo install -t /usr/local/bin drone-runner-exec
          sudo mkdir -p ~/.drone-runner-exec
          printf "DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }}\nDRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }}\nDRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }}\n" | sudo tee ~/.drone-runner-exec/config
          # drone-runner-exec service install
          # drone-runner-exec service start
          sudo drone-runner-exec daemon ~/.drone-runner-exec/config
      - name: Run drone/drone-runner-exec-darwin-amd64@shell
        if: matrix.os == 'macos-latest'
        run: |
          curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_darwin_amd64.tar.gz | tar zx
          sudo cp drone-runner-exec /usr/local/bin
          sudo mkdir -p ~/.drone-runner-exec
          printf "DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }}\nDRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }}\nDRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }}\n" | sudo tee ~/.drone-runner-exec/config
          # drone-runner-exec service install
          # drone-runner-exec service start
          sudo drone-runner-exec daemon ~/.drone-runner-exec/config
