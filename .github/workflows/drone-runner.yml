name: drone-runner

on: [push, pull_request]

jobs:
  runner:
    name: Docker Runner on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Run drone/drone-runner-docker@shell
        run: |
          docker run \
            --volume=/var/run/docker.sock:/var/run/docker.sock \
            --env=DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }} \
            --env=DRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }} \
            --env=DRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }} \
            --restart=always \
            --name=runner \
            drone/drone-runner-docker:1.8.2

  runner-in-docker:
    name: Docker Runner In Docker on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    container:
      image: docker:latest
    steps:
      - name: Run drone/drone-runner-docker@shell
        run: |
          docker run \
            --volume=/var/run/docker.sock:/var/run/docker.sock \
            --env=DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }} \
            --env=DRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }} \
            --env=DRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }} \
            --restart=always \
            --name=runner \
            drone/drone-runner-docker:1.8.2

  runner-exec:
    name: Exec Runner on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Run drone/drone-runner-exec-windows-amd64@shell
        if: matrix.os == 'windows-latest'
        run: |
          # RUNNER_ARCH X64
          curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_windows_amd64.tar.gz -o drone_runner_exec_windows_amd64.tar.gz
          ls
          tar zx .\drone_runner_exec_windows_amd64.tar.gz
          ls
          mkdir C:\Drone
          mkdir C:\Drone\drone-runner-exec
          cp drone-runner-exec.exe C:\Drone\drone-runner-exec
          ls C:\Drone\drone-runner-exec
      - name: Run drone/drone-runner-exec-linux-amd64@shell
        if: matrix.os == 'ubuntu-latest'
        run: |
          # RUNNER_ARCH X64
          curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_amd64.tar.gz | tar zx
          sudo install -t /usr/local/bin drone-runner-exec
          sudo mkdir -p ~/.drone-runner-exec
          printf "DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }}\nDRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }}\nDRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }}\n" | sudo tee ~/.drone-runner-exec/config
          # drone-runner-exec service install
          # drone-runner-exec service start
          sudo drone-runner-exec daemon ~/.drone-runner-exec/config
      - name: Run drone/drone-runner-exec-darwin-amd64@shell
        if: matrix.os == 'macos-latest'
        run: |
          curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_darwin_amd64.tar.gz | tar zx
          sudo cp drone-runner-exec /usr/local/bin
          sudo mkdir -p ~/.drone-runner-exec
          printf "DRONE_RPC_PROTO=${{ secrets.DRONE_RPC_PROTO }}\nDRONE_RPC_HOST=${{ secrets.DRONE_RPC_HOST }}\nDRONE_RPC_SECRET=${{ secrets.DRONE_RPC_SECRET }}\n" | sudo tee ~/.drone-runner-exec/config
          # drone-runner-exec service install
          # drone-runner-exec service start
          sudo drone-runner-exec daemon ~/.drone-runner-exec/config
